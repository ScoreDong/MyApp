#!/usr/bin/env python
# coding: utf-8

# In[34]:


import pandas as pd 
import numpy as np 
import sys


file_path=r"F:\OneDrive\华莱士\电商\电商\\"
file_name="\测试数据.xlsx"


def run_code(file_name):
    file=file_path+file_name
    df = pd.read_excel(file,
                    usecols = "D,M,R:AD",
                    sheet_name= '订单明细')
    df.head(10)


    # In[35]:


    # 设定保底和费率
    设定保底=4.5
    设定费率=15

    # 测算保底和费率
    测算保底=0 # 这个没保底的
    测算费率=20

    print(
    """
    配送方式	费率	保底
    美团快送	15.0%	4.5
    美团专送	15.0%	4.5
    到店取餐	5.0%	0.5
    津贴联盟		-
    代理商配送	16.0%	-按原价
    商家自配	16.0%	-
    只测算美团的
    """)

    df.dtypes


    # In[36]:


    # 版本0.21.0引入了infer_objects()方法，用于将具有对象数据类型的DataFrame的列转换为更具体的类型。

    df['美团活动补贴']=df['美团活动补贴'].replace('-',0).astype(float)
    df['用户支付配送费']=df['用户支付配送费'].replace('-',0).astype(float)
    df['用户线上支付金额']=df['用户线上支付金额'].replace('-',0).astype(float)
    try:
        df['费率']=df['费率'].str.strip("%").astype(float) # Python如何将百分号的字符转成数字
    except AttributeError as err:
        print(err)

    df['保底']=df['保底'].replace('-',0).astype(float) # Python强行转换格式

    df美团待测算=df

    df美团待测算.dtypes


    # In[37]:


    print("当前最大费率（代理商费率16，美团专送15）：",df['费率'].max(),"当前最大保底：",df['保底'].max())
    print("""
    费率	计数
    """,df美团待测算['费率'].value_counts())


    # In[38]:


    print("描述性统计，数据收集目标：保底订单计数，总订单计数，全部客单价、保底客单价、抽点客单价（筛选美团外卖）")

    df美团待测算.loc[df美团待测算['平台服务费']== -df美团待测算['保底'],'是否保底']=True # 算保底
    df美团待测算['是否保底']=df美团待测算['是否保底'].fillna(False)
    df美团待测算.head(10)


    # In[39]:


    df描述性统计1=df美团待测算.groupby(['交易类型','配送方式','是否保底'])['平台服务费','用户线上支付金额','用户支付配送费','美团活动补贴'].count().reset_index()
    df描述性统计1['统计']='计数'
    df描述性统计1['文件名']=file_name


    # In[40]:


    df描述性统计2=df美团待测算.groupby(['交易类型','配送方式','是否保底'])['平台服务费','用户线上支付金额','用户支付配送费','美团活动补贴'].mean().reset_index()
    df描述性统计2['统计']='平均值'
    df描述性统计2['文件名']=file_name


    # In[41]:


    df描述性统计3=df美团待测算.groupby(['交易类型','配送方式','是否保底'])['平台服务费','用户线上支付金额','用户支付配送费','美团活动补贴'].sum().reset_index()
    df描述性统计3['统计']='求和'
    df描述性统计3['文件名']=file_name

    pd.concat([df描述性统计1,df描述性统计2,df描述性统计3],axis=0).to_csv(file_path +  '输出1' + '.csv', encoding='utf_8_sig', mode='a', header=False)

    pass


file_name=[
r"四川直营11月美团外卖数据.csv",

r"11月厦门龙岩财务账单.xls",
r"11月美团外卖明细-林腾安徽.xls",
r"11月美团外卖明细-林腾莆田.xls",
r"out-陕西美团直营11月(1).xlsx",
r"上海区11月美团数据.xls",
r"云南美团外卖11月数据.xls",
r"保定11月美团外卖财务报表.xls",
r"全部门店2019-11-01_2019-11-10订单-1575644332441-8008011.xls",
r"全部门店2019-11-01~2019-11-30订单-1575253898029-7934748.xls",
r"全部门店2019-11-11_2019-11-20订单-1575643786176-8008013.xls",
r"全部门店2019-11-21_2019-11-30订单-1575644572016-8008014.xls",
r"兰州区域11月美团外卖数据.xls",
r"刘建刚全部门店2019-11-01-2019-11-30订单-1575338975963-7956109.xls",
r"华莱士泉州美团财务报表11.1-11.30.xls",
r"吕子韦全部门店2019-11-01-2019-11-30订单-1575340772003-7956176.xls",
r"周钢键全部门店2019-11-01-2019-11-30订单-1575339068367-7956129.xls",
r"安徽直营11月美团财务报表数据.xls",
r"山东11月美团外卖全部门店2019-11-01_2019-11-30订单-1575517083431-7985286.xlsx",
r"山西11月美团外卖财务报表.xlt",
r"广西区域--全部门店2019-11-01-2019-11-30订单-1575256856845-7935349.xls",
r"数据错误-华莱士（江西）11月数据.xlsx",
r"曾凡煜全部门店2019-11-01-2019-11-30订单-1575340890795-7956094.xls",
r"李俊全部门店2019-11-01-2019-11-30订单-1575338425893-7956078.xls",
r"林腾四川11月美团线上数据.xls",
r"林腾广东.xls",
r"河北区域2019-11-01_2019-11-30_全店数据_订单1575619353293.csv",
r"河南区域11月份美团外卖数据.xls",
r"浙江美团外卖11月数据.csv",
r"王忠宝全部门店2019-11-01-2019-11-30订单-1575340036845-7956208.xls",
r"福州11月美团外卖全部门店.xls",
r"聂德芳全部门店2019-11-01-2019-11-30订单-1575339933879-7956224.xls",
r"谭忠志全部门店2019-11-01-2019-11-30订单-1575339559898-7956059.xls",
r"贵州全部门店2019-11-01-2019-11-30订单-1575251416103-7932750.xls",
r"赵恒全部门店2019-11-01-2019-11-30订单-1575341412214-7956195.xls",
r"辽宁2019-11-01-2019-11-30订单-1575267478172-7942426.xls",
r"陕西团购-2019.11美团外卖.xls"
]

for i in file_name:
    print(i,"reading")
    try:
        run_code(i)
    except BaseException as err:
        print(err)
    print(i,"OK")
